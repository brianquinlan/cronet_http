// Autogenerated from Pigeon (v3.2.3), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package io.flutter.plugins.cronet_http;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression"})
public class Messages {

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class ReadCompleted {
    private @NonNull byte[] data;
    public @NonNull byte[] getData() { return data; }
    public void setData(@NonNull byte[] setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"data\" is null.");
      }
      this.data = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private ReadCompleted() {}
    public static final class Builder {
      private @Nullable byte[] data;
      public @NonNull Builder setData(@NonNull byte[] setterArg) {
        this.data = setterArg;
        return this;
      }
      public @NonNull ReadCompleted build() {
        ReadCompleted pigeonReturn = new ReadCompleted();
        pigeonReturn.setData(data);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("data", data);
      return toMapResult;
    }
    static @NonNull ReadCompleted fromMap(@NonNull Map<String, Object> map) {
      ReadCompleted pigeonResult = new ReadCompleted();
      Object data = map.get("data");
      pigeonResult.setData((byte[])data);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class ResponseStarted {
    private @NonNull Map<String, List<String>> headers;
    public @NonNull Map<String, List<String>> getHeaders() { return headers; }
    public void setHeaders(@NonNull Map<String, List<String>> setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"headers\" is null.");
      }
      this.headers = setterArg;
    }

    private @NonNull Long statusCode;
    public @NonNull Long getStatusCode() { return statusCode; }
    public void setStatusCode(@NonNull Long setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"statusCode\" is null.");
      }
      this.statusCode = setterArg;
    }

    private @NonNull Boolean isRedirect;
    public @NonNull Boolean getIsRedirect() { return isRedirect; }
    public void setIsRedirect(@NonNull Boolean setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"isRedirect\" is null.");
      }
      this.isRedirect = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private ResponseStarted() {}
    public static final class Builder {
      private @Nullable Map<String, List<String>> headers;
      public @NonNull Builder setHeaders(@NonNull Map<String, List<String>> setterArg) {
        this.headers = setterArg;
        return this;
      }
      private @Nullable Long statusCode;
      public @NonNull Builder setStatusCode(@NonNull Long setterArg) {
        this.statusCode = setterArg;
        return this;
      }
      private @Nullable Boolean isRedirect;
      public @NonNull Builder setIsRedirect(@NonNull Boolean setterArg) {
        this.isRedirect = setterArg;
        return this;
      }
      public @NonNull ResponseStarted build() {
        ResponseStarted pigeonReturn = new ResponseStarted();
        pigeonReturn.setHeaders(headers);
        pigeonReturn.setStatusCode(statusCode);
        pigeonReturn.setIsRedirect(isRedirect);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("headers", headers);
      toMapResult.put("statusCode", statusCode);
      toMapResult.put("isRedirect", isRedirect);
      return toMapResult;
    }
    static @NonNull ResponseStarted fromMap(@NonNull Map<String, Object> map) {
      ResponseStarted pigeonResult = new ResponseStarted();
      Object headers = map.get("headers");
      pigeonResult.setHeaders((Map<String, List<String>>)headers);
      Object statusCode = map.get("statusCode");
      pigeonResult.setStatusCode((statusCode == null) ? null : ((statusCode instanceof Integer) ? (Integer)statusCode : (Long)statusCode));
      Object isRedirect = map.get("isRedirect");
      pigeonResult.setIsRedirect((Boolean)isRedirect);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class StartRequest {
    private @NonNull String url;
    public @NonNull String getUrl() { return url; }
    public void setUrl(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"url\" is null.");
      }
      this.url = setterArg;
    }

    private @NonNull String method;
    public @NonNull String getMethod() { return method; }
    public void setMethod(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"method\" is null.");
      }
      this.method = setterArg;
    }

    private @NonNull Map<String, String> headers;
    public @NonNull Map<String, String> getHeaders() { return headers; }
    public void setHeaders(@NonNull Map<String, String> setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"headers\" is null.");
      }
      this.headers = setterArg;
    }

    private @NonNull byte[] body;
    public @NonNull byte[] getBody() { return body; }
    public void setBody(@NonNull byte[] setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"body\" is null.");
      }
      this.body = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private StartRequest() {}
    public static final class Builder {
      private @Nullable String url;
      public @NonNull Builder setUrl(@NonNull String setterArg) {
        this.url = setterArg;
        return this;
      }
      private @Nullable String method;
      public @NonNull Builder setMethod(@NonNull String setterArg) {
        this.method = setterArg;
        return this;
      }
      private @Nullable Map<String, String> headers;
      public @NonNull Builder setHeaders(@NonNull Map<String, String> setterArg) {
        this.headers = setterArg;
        return this;
      }
      private @Nullable byte[] body;
      public @NonNull Builder setBody(@NonNull byte[] setterArg) {
        this.body = setterArg;
        return this;
      }
      public @NonNull StartRequest build() {
        StartRequest pigeonReturn = new StartRequest();
        pigeonReturn.setUrl(url);
        pigeonReturn.setMethod(method);
        pigeonReturn.setHeaders(headers);
        pigeonReturn.setBody(body);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("url", url);
      toMapResult.put("method", method);
      toMapResult.put("headers", headers);
      toMapResult.put("body", body);
      return toMapResult;
    }
    static @NonNull StartRequest fromMap(@NonNull Map<String, Object> map) {
      StartRequest pigeonResult = new StartRequest();
      Object url = map.get("url");
      pigeonResult.setUrl((String)url);
      Object method = map.get("method");
      pigeonResult.setMethod((String)method);
      Object headers = map.get("headers");
      pigeonResult.setHeaders((Map<String, String>)headers);
      Object body = map.get("body");
      pigeonResult.setBody((byte[])body);
      return pigeonResult;
    }
  }

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class StartResponse {
    private @NonNull String eventChannel;
    public @NonNull String getEventChannel() { return eventChannel; }
    public void setEventChannel(@NonNull String setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"eventChannel\" is null.");
      }
      this.eventChannel = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private StartResponse() {}
    public static final class Builder {
      private @Nullable String eventChannel;
      public @NonNull Builder setEventChannel(@NonNull String setterArg) {
        this.eventChannel = setterArg;
        return this;
      }
      public @NonNull StartResponse build() {
        StartResponse pigeonReturn = new StartResponse();
        pigeonReturn.setEventChannel(eventChannel);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("eventChannel", eventChannel);
      return toMapResult;
    }
    static @NonNull StartResponse fromMap(@NonNull Map<String, Object> map) {
      StartResponse pigeonResult = new StartResponse();
      Object eventChannel = map.get("eventChannel");
      pigeonResult.setEventChannel((String)eventChannel);
      return pigeonResult;
    }
  }
  private static class HttpApiCodec extends StandardMessageCodec {
    public static final HttpApiCodec INSTANCE = new HttpApiCodec();
    private HttpApiCodec() {}
    @Override
    protected Object readValueOfType(byte type, ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return ReadCompleted.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)129:         
          return ResponseStarted.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)130:         
          return StartRequest.fromMap((Map<String, Object>) readValue(buffer));
        
        case (byte)131:         
          return StartResponse.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(ByteArrayOutputStream stream, Object value)     {
      if (value instanceof ReadCompleted) {
        stream.write(128);
        writeValue(stream, ((ReadCompleted) value).toMap());
      } else 
      if (value instanceof ResponseStarted) {
        stream.write(129);
        writeValue(stream, ((ResponseStarted) value).toMap());
      } else 
      if (value instanceof StartRequest) {
        stream.write(130);
        writeValue(stream, ((StartRequest) value).toMap());
      } else 
      if (value instanceof StartResponse) {
        stream.write(131);
        writeValue(stream, ((StartResponse) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface HttpApi {
    @NonNull StartResponse start(@NonNull StartRequest request);
    void dummy(@NonNull ResponseStarted a1, @NonNull ReadCompleted a2);

    /** The codec used by HttpApi. */
    static MessageCodec<Object> getCodec() {
      return HttpApiCodec.INSTANCE;
    }

    /** Sets up an instance of `HttpApi` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, HttpApi api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.HttpApi.start", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              StartRequest requestArg = (StartRequest)args.get(0);
              if (requestArg == null) {
                throw new NullPointerException("requestArg unexpectedly null.");
              }
              StartResponse output = api.start(requestArg);
              wrapped.put("result", output);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.HttpApi.dummy", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              ResponseStarted a1Arg = (ResponseStarted)args.get(0);
              if (a1Arg == null) {
                throw new NullPointerException("a1Arg unexpectedly null.");
              }
              ReadCompleted a2Arg = (ReadCompleted)args.get(1);
              if (a2Arg == null) {
                throw new NullPointerException("a2Arg unexpectedly null.");
              }
              api.dummy(a1Arg, a2Arg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static Map<String, Object> wrapError(Throwable exception) {
    Map<String, Object> errorMap = new HashMap<>();
    errorMap.put("message", exception.toString());
    errorMap.put("code", exception.getClass().getSimpleName());
    errorMap.put("details", "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    return errorMap;
  }
}
